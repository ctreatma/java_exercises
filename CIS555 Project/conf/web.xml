<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app 
    PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

    <!-- General description of your web application -->
    <display-name>Test servlets</display-name>
    <description>
    Some servlets you can use to test your application server
    </description>

    <!-- Context initialization parameters that define shared
         String constants used within your application, which
         can be customized by the system administrator who is
         installing your application.  The values actually
         assigned to these parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletContext().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of context initialization
         parameters, including zero.
    -->
    <context-param>
      <param-name>webmaster</param-name>
      <param-value>maz@seas.upenn.edu</param-value>
      <description>
        The EMAIL address of the administrator to whom questions
        and comments about this application should be addressed.
      </description>
    </context-param>

    <context-param>
      <param-name>BDBstore</param-name>
      <param-value>target/datastore</param-value>
      <description>
        The directory path to Berkeley data store environment
      </description>
    </context-param>

    <!-- Servlet definitions for the servlets that make up
         your web application, including initialization
         parameters.  With Tomcat, you can also send requests
         to servlets not listed here with a request like this:

           http://localhost:8080/{context-path}/servlet/{classname}

         but this usage is not guaranteed to be portable.  It also
         makes relative references to images and other resources
         required by your servlet more complicated, so defining
         all of your servlets (and defining a mapping to them with
         a servlet-mapping element) is recommended.

         Servlet initialization parameters can be retrieved in a
         servlet or JSP page by calling:

             String value =
               getServletConfig().getInitParameter("name");

         where "name" matches the <param-name> element of
         one of these initialization parameters.

         You can define any number of servlets, including zero.
    -->

    <servlet>
      <servlet-name>webSearch</servlet-name>
      <servlet-class>edu.upenn.cis555.mustang.web.WebSearch</servlet-class>
	  <init-param>
        <param-name>searchEngine</param-name>
        <param-value>spec34.seas.upenn.edu</param-value>
      </init-param>
	  <init-param>
        <param-name>searchEnginePort</param-name>
        <param-value>8091</param-value>
      </init-param>
      <!-- Load this servlet at server startup time -->
      <load-on-startup/>
    </servlet>

    <servlet-mapping>
      <servlet-name>webSearch</servlet-name>
      <url-pattern>/search</url-pattern>
    </servlet-mapping>

    <!-- Define the default session timeout for your application,
         in minutes.  From a servlet or JSP page, you can modify
         the timeout for a particular session dynamically by using
         HttpSession.getMaxInactiveInterval(). -->
    <session-config>
      <session-timeout>30</session-timeout>    <!-- 30 minutes -->
    </session-config>

</web-app>
