package project550;

import java.util.Date;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.*;
import org.apache.struts2.ServletActionContext;

/**
 * @author ctreatma
 *
 * This class handles writing RSS files when a user is logged
 * in and performs an action.
 */
public class RSSHandler extends ExampleSupport {

    public String execute() throws Exception {
        setUser(DBConnector.getUser(uid, false, false));
        setLinks(DBConnector.getUserLinks(uid));
        setComments(DBConnector.getUserComments(uid));
        setVotes(DBConnector.getUserVotes(uid));
        
        return SUCCESS;
    }
    
    private int uid;
    private UserBean user;
    private LinkBean[] links;
    private CommentBean[] comments;
    private VoteBean[] votes;
    
    public int getUid() {
        return uid;
    }
    public void setUid(int uid) {
        this.uid = uid;
    }
    public UserBean getUser() {
        return user;
    }
    public void setUser(UserBean user) {
        this.user = user;
    }
    public LinkBean[] getLinks() {
        return links;
    }
    public void setLinks(LinkBean[] links) {
        this.links = links;
    }
    public CommentBean[] getComments() {
        return comments;
    }
    public void setComments(CommentBean[] comments) {
        this.comments = comments;
    }
    public VoteBean[] getVotes() {
        return votes;
    }
    public void setVotes(VoteBean[] votes) {
        this.votes = votes;
    }
    
    /*
    public static void writeLinkPosted(UserBean user, LinkBean link) throws IOException {
        // Add an item with:
        // Title: Your Friend Posted a Link
        // Description:  {username} posted a link.
        // Link:  {host}/{webapp}/showLink.action?lid={link id}
        // pubDate
        String newItem = "<item>\n<title>Your Friend Posted a Link</title>\n" +
         "<description>" + user.getUsrName() + " posted a link, titled \"" + link.getTitle() + ".\"</description>\n" +
         "<link>" + "http://localhost:8080/Proj550/project550/showLink.action?lid=" + link.getLid() + "</link>\n" +
         "<pubDate>" + link.getPostDateTime() + "</pubDate>\n</item>\n";
        
        writeRssItem(user, newItem);
    }
    
    public static void writeCommentPosted(UserBean user, CommentBean comment) throws IOException {
        // Add an item with:
        // Title: Your Friend Posted a Comment
        // Description:  {username} posted a comment on a link.
        // Link:  {host}/{webapp}/showLink.action?lid={link id}
        // pubDate
        String newItem = "<item>\n<title>Your Friend Posted a Comment</title>\n" +
        "<description>" + user.getUsrName() + " posted a comment, titled \"" + comment.getTitle() + ".\"</description>\n" +
        "<link>" + "http://localhost:8080/Proj550/project550/showLink.action?lid=" + comment.getLid() + "</link>\n" +
        "<pubDate>" + comment.getPostDateTime() + "</pubDate>\n</item>\n";
        
        writeRssItem(user, newItem);
    }
    
    public static void writeLinkRated(UserBean user, VoteBean vote) throws IOException {
        // Add an item with:
        // Title: Your Friend Rated a Link
        // Description: {username} rated a link, giving it a score of {score}.
        // Link:  {host}/{webapp}/showLink.action?lid={link id}
        // pubDate
        String newItem = "<item>\n<title>Your Friend Rated a Link</title>\n" +
        "<description>" + user.getUsrName() + " rated a link, giving a score of " + vote.getRating() + ".</description>\n" +
        "<link>" + "http://localhost:8080/Proj550/project550/showLink.action?lid=" + vote.getLid() + "</link>\n" +
        "<pubDate>" + new Date() + "</pubDate>\n</item>\n";
        
        writeRssItem(user, newItem);
    }
    
    private static void writeRssItem(UserBean user, String newItem) throws IOException {
        String rssDirPath = ServletActionContext.getServletContext().getRealPath("/") + "rss/";
        File rssDir = new File(rssDirPath);
        if (!rssDir.exists()) {
            rssDir.mkdirs();
        }
        File file = new File(rssDirPath + user.getUsrName() + ".rss");
        if (!file.exists()) {
            initRssFile(file);
        }
        FileReader rssFileIn = new FileReader(file);
        BufferedReader bfr = new BufferedReader(rssFileIn);
        StringBuffer contents = new StringBuffer();
        String line;
        while ((line = bfr.readLine()) != null) {
            contents.append(line);
        }

        rssFileIn.close();
        FileWriter rssFileOut = new FileWriter(file, false);
        int insertIndex;
        if (contents.indexOf("<item>") >= 0) {
            insertIndex = contents.indexOf("<item>");
        }
        else {
            insertIndex = contents.indexOf("</channel>");
        }
        
        contents.insert(insertIndex, newItem);
        
        rssFileOut.write(contents.toString());
        rssFileOut.close();
    }
    
    private static void initRssFile(File file) throws IOException {
        // Create the new rss file, with no items.
        file.createNewFile();
        FileWriter rssFile = new FileWriter(file);
  
        String contents = "<?xml version=\"1.0\" ?>\n" +
        "<rss version=\"2.0\">\n" +
        "<channel>\n" + 
        "</channel>\n" +
        "</rss>";
        
        rssFile.write(contents);
        rssFile.close();
    }
    */
}
